// Generated by CoffeeScript 1.9.3
(function() {
  var _op, _val, all_types, augment, augment_and_filter_request, build_file_view, cmp, delete_button, die, doValidityCheck, do_request, do_slack_request, fields, filter, generate_request, generate_where_row, generic_valid_text, getID, global_files, hash_filter, op_all, op_bool, op_cmp, op_no_regex, op_nocmp, operator_names, params, redir_submit_link, selectrowsEventHandler, toBytes;

  global_files = [];

  params = decodeURIComponent(document.URL).extract() || {};

  window.onload = function() {
    var container, filtered, i;
    container = $('#selectrows');
    container.on('click', selectrowsEventHandler);
    container.on('input paste', 'input', doValidityCheck);
    $('#api').val(params.token);
    filtered = _.object(_(params).pairs().filter(function(pair) {
      return !_.contains(['token', 'team'], pair[0]);
    }));
    i = 1;
    _.each(filtered, function(v, k) {
      container.append(generate_where_row(i, k, v.substr(0, 1), v.substr(1)));
      return i += 1;
    });
    container.append(generate_where_row(i));
    generate_request(params, function(files) {
      return augment_and_filter_request(files, function(files) {
        _(files).forEach(function(file) {
          $('#data').append(build_file_view(file));
          return global_files.push(file);
        });
        $('#loading_icon').remove();
        return $('#data').prepend(delete_button());
      });
    });
    return $('#submit_button').on('click', redir_submit_link);
  };

  doValidityCheck = function(event) {
    var html, id, left, mid, right, rightcolor, sel, style;
    id = getID($(event.target));
    left = $("#where_left_" + id);
    right = $("#where_right_" + id);
    mid = $("#where_oper_" + id);
    sel = function(m, k) {
      if (m === k) {
        return 'selected';
      } else {
        return '';
      }
    };
    style = function(input, border, midHTML, valid_text) {
      var field;
      field = $(input.parent());
      field.css('border-color', border);
      field.children('label').css('background-color', border);
      if (valid_text) {
        $("#valid_text_" + id + " span").html(valid_text);
      }
      if (midHTML) {
        return mid.html(midHTML);
      }
    };
    if (left.val().length === 0 || !_(_(fields).keys()).contains(left.val())) {
      return style(left, (left.val().length > 0 ? 'red' : '#aaa'), _.map(operator_names, function(v, k) {
        return "<option value='" + k + "' " + (sel(mid.val(), k)) + ">" + v + "</option>";
      }).join("\n"), "Type a valid field in the left box!");
    } else {
      html = _.map(hash_filter(operator_names, function(v, k) {
        return k === '' || _.contains(fields[left.val()].ops, k);
      }), function(v, k) {
        return "<option value='" + k + "' " + (sel(mid.val(), k)) + ">" + v + "</option>";
      }).join("\n");
      style(left, '#aaa', html, fields[left.val()].valid_text);
      rightcolor = '#aaa';
      if (!fields[left.val()].valid(right.val())) {
        rightcolor = 'red';
      }
      return style(right, rightcolor);
    }
  };

  delete_button = function() {
    var out;
    out = $("<span class='field' id='delete_button'><input type='button' value='Delete All'></input></span>");
    out.on('click', function(event) {
      var button;
      button = $(out.children()[0]);
      if (button.val() === 'Delete All') {
        button.val('Click again within three seconds to confirm');
        setTimeout((function() {
          return button.val('Delete All');
        }), 3000);
      } else {
        return _(global_files).forEach(function(file, index) {
          do_slack_request('files.delete', {
            file: file.id
          });
          return $("#fieldview_" + index).remove();
        });
      }
    });
    return out;
  };

  redir_submit_link = function() {
    var arg, child, id, j, len, ref, url;
    params = {};
    params.token = $('#api').val();
    ref = $('#selectrows').children();
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      id = getID($(child));
      arg = $("#where_left_" + id).val();
      if (arg) {
        params[arg] = $("#where_oper_" + id).val() + $("#where_right_" + id).val();
      }
    }
    console.log(params);
    url = window.location.href;
    if (url.indexOf('?') > 0) {
      url = url.split('?')[0];
    }
    url += '?' + _.map(params, function(v, k) {
      return k + "=" + v;
    }).join('&');
    return window.location.href = url;
  };

  getID = function(target) {
    return +target.attr('id').split('_').slice(-1);
  };

  selectrowsEventHandler = function(event) {
    var classes, rows;
    classes = event.target.classList;
    rows = $('#selectrows');
    if (_.contains(classes, 'fa-minus')) {
      $('#fieldrow_' + getID($(event.target))).remove();
      if (rows.children().length === 0) {
        return rows.append(generate_where_row(1));
      }
    } else if (_.contains(classes, 'fa-plus')) {
      return rows.append(generate_where_row(getID($('#selectrows').children().last()) + 1));
    }
  };

  generate_where_row = function(id, l, m, r) {
    var sel;
    l || (l = '');
    m || (m = '');
    r || (r = '');
    sel = function(m, k) {
      if (m === k) {
        return 'selected';
      } else {
        return '';
      }
    };
    return "<div class='fieldrow' id='fieldrow_" + id + "'>\n<span>\n    <div class='field' class='param_input'>\n        <input type='text' id='where_left_" + id + "' placeholder='Field' value='" + l + "' />\n        <span class=\"fa fa-question-circle\">\n            <span class='valid-left'>" + (_(fields).keys().join(', ')) + "</span>\n        </span>\n        <label for='where_left_" + id + "'>Field</label>\n    </div>\n</span>\n<span>\n    <div class='field'>\n        <select required id='where_oper_" + id + "' selected='" + m + "'>\n        " + (_.map(operator_names, function(v, k) {
      return "<option value='" + k + "' " + (sel(m, k)) + ">" + v + "</option>";
    }).join("\n")) + "\n        </select>\n        <label>Operator</label>\n    </div>\n</span>\n<span>\n    <div class='field'>\n        <input type='text' id='where_right_" + id + "' placeholder='Comparison' value='" + r + "' />\n        <span class=\"fa fa-question-circle valid-right\" id='valid_text_" + id + "'>\n            <span class='valid-right'>Type a valid field in the left box!</span>\n        </span>\n        <label for='where_right_${id}'>Comparison</label>\n    </div>\n</span>\n<span class=\"fa fa-minus\" id='where_remove_" + id + "'></span>\n<span class=\"fa fa-plus\" id='where_add_" + id + "'></span>\n</div>";
  };

  _op = function(s) {
    if (s) {
      return s.substr(0, 1);
    } else {
      return '';
    }
  };

  _val = function(s) {
    if (s) {
      return s.substr(1);
    } else {
      return '';
    }
  };

  all_types = ['posts', 'snippets', 'images', 'gdocs', 'zips', 'pdfs'];

  generate_request = function(params, callback) {
    var ids, submit, username;
    if (_op(params.user) === '_') {
      username = _val(params.user);
    }
    submit = {};
    submit.token = params.token;
    ids = [];
    if (username) {
      return do_slack_request('users.list', submit, 'members', function(members) {
        ids = _(members).filter(function(user) {
          return user.name === username;
        }).map(function(user) {
          return user.id;
        });
        if (ids.length === 0) {
          callback({
            ok: false,
            error: 'user_not_found'
          });
          return;
        }
        return do_request(params, callback, submit, ids);
      });
    } else {
      return do_request(params, callback, submit, ids);
    }
  };

  do_request = function(params, callback, submit, users) {
    var j, len, results, types, user;
    if (users.length === 0) {
      users.push(void 0);
    }
    results = [];
    for (j = 0, len = users.length; j < len; j++) {
      user = users[j];
      if (_.contains(['>', '_'], _op(params.time))) {
        submit.ts_from = _val(params.time);
      }
      if (_.contains(['<', '_'], _op(params.time))) {
        submit.ts_to = _val(params.time);
      }
      if (user) {
        submit.user = user;
      }
      if (_.contains(['_', '!'], _op(params.type))) {
        types = _val(params.type);
      }
      if (types) {
        types = types.indexOf(',') > 0 ? types.split(',') : [types];
        if (_op(params.type) === '!') {
          types = _.difference(all_types, types);
        }
        submit.types = _(types).map(function(str) {
          return str.trim();
        }).join(',');
      }
      submit.count = 100;
      if ('_' === _op(params.limit)) {
        submit.count = _val(params.limit);
      }
      results.push(do_slack_request('files.list', submit, 'files', callback));
    }
    return results;
  };

  toBytes = function(size) {
    var c, f;
    c = size.substr(-1);
    f = size.substr(0, size.length - 1);
    if (c === 'K') {
      return f * 1000;
    } else if (c === 'M') {
      return f * 1000 * 1000;
    } else if (c === 'G') {
      return f * 1000 * 1000 * 1000;
    } else {
      return size;
    }
  };

  cmp = function(a, op, b) {
    if (!b) {
      op = _op(b);
      b = _val(b);
    }
    if (op === '_') {
      return a === b;
    } else if (op === '!') {
      return a !== b;
    } else if (op === '>') {
      return +a > +b;
    } else if (op === '<') {
      return +a < +b;
    } else if (op === '~') {
      return new RegExp(b).test(a);
    } else {
      return false;
    }
  };

  filter = function(files) {
    return _(files).filter(function(file) {
      if (params.size) {
        return cmp(file.size, _op(params.size), toBytes(_val(params.size)));
      }
      return true;
    });
  };

  augment = function(files, decode_ids, callback) {
    _(files).forEach(function(file, index) {
      file.user_name = decode_ids[file.user].user_name;
      file.shared_in || (file.shared_in = []);
      _(file.groups).forEach(function(group) {
        return file.shared_in.push(decode_ids[group].group_name);
      });
      return _(file.channels).forEach(function(channel) {
        return file.shared_in.push(decode_ids[channel].channel_name);
      });
    });
    return callback(files);
  };

  augment_and_filter_request = function(files, callback) {
    var count, decode_ids, limit;
    files = filter(files);
    count = 0;
    decode_ids = {};
    _(files).forEach(function(file, index) {
      if (!decode_ids[file.user]) {
        decode_ids[file.user] = {
          want: 'user',
          pass: {
            user: file.user
          },
          func: function(user) {
            decode_ids[file.user].user_name = user.name;
            count += 1;
            if (count === limit) {
              return augment(files, decode_ids, callback);
            }
          }
        };
      }
      _(file.groups).forEach(function(group) {
        if (!decode_ids[group]) {
          return decode_ids[group] = {
            want: 'group',
            pass: {
              channel: group
            },
            func: function(gobj) {
              decode_ids[group].group_name = gobj.name;
              count += 1;
              if (count === limit) {
                return augment(files, decode_ids, callback);
              }
            }
          };
        }
      });
      return _(file.channels).forEach(function(channel) {
        if (!decode_ids[channel]) {
          return decode_ids[channel] = {
            want: 'channel',
            pass: {
              channel: channel
            },
            func: function(cobj) {
              decode_ids[channel].channel_name = "#" + cobj.name;
              count += 1;
              if (count === limit) {
                return augment(files, decode_ids, callback);
              }
            }
          };
        }
      });
    });
    limit = _(decode_ids).keys().length;
    return _(decode_ids).forEach(function(obj, k) {
      return do_slack_request(obj.want + "s.info", obj.pass, obj.want, obj.func);
    });
  };

  build_file_view = function(file, index) {
    file.shared_in || (file.shared_in = []);
    return $('#data').append("<div class='fileview' id='fileview_" + index + "'>\n    <a href=\"" + file.permalink + "\">\n        <img src=" + file.thumb_64 + " />\n    </a>\n    <div class='fv-metadata'>\n        <span class='fv-img-title'>" + file.title + "</span>\n        <span class='fv-user'>(" + file.user_name + ") | (" + file.size + ")</span>\n        <span class='fv-datetime'>" + (new Date(1000 * file.timestamp)) + "</span>\n    </div>\n    <div class='fv-spacer'></div>\n    <div class='fv-metadata'>\n        <span class='fv-shared-in'>" + (file.shared_in.join(', ')) + "</span>\n    </div>\n</div>");
  };

  die = function(error) {
    console.log(error);
    return $('#data').html("<div class='error'>" + error + "</div>");
  };

  do_slack_request = function(method, pass, want, callback) {
    pass.token = params.token;
    return $.post("https://slack.com/api/" + method, pass).done(function(data) {
      if (data.ok) {
        if (callback) {
          return callback(data[want]);
        }
      } else {
        return die("Slack API Error: " + data.error);
      }
    }).fail(function(err) {
      return die("POST Error! See Javascript Console for details.");
    });
  };

  operator_names = {
    '': 'Operator',
    '_': 'is',
    '!': 'is not',
    '<': '&lt',
    '>': '&gt',
    '~': 'matches'
  };

  op_bool = ['_', '!'];

  op_cmp = ['<', '>'];

  op_nocmp = _.union(op_bool, ['~']);

  op_no_regex = _.union(op_bool, op_cmp);

  op_all = _.union(op_nocmp, op_cmp);

  generic_valid_text = "Any text or, with 'matches', a JavaScript regular expression (leave out the slashes on the ends).";

  fields = {
    'user': {
      'use': 'query',
      'ops': op_nocmp,
      'valid': function(user) {
        return /^[a-z0-9][a-z0-9._-]*$/.test(user);
      },
      'valid_text': "A letter or number followed by letters, numbers, periods, hypens, or underscores."
    },
    'time': {
      'use': 'query',
      'ops': op_all,
      'valid': function(time) {
        return !isNan(new Date(time).getTime());
      },
      'valid_text': "Anything that works with Javascript's new Date(). The format '" + (new Date()) + "' is guaranteed to work."
    },
    'type': {
      'use': 'query',
      'ops': op_nocmp,
      'valid': function(types) {
        return _(types.split(',')).every(function(type) {
          return _(['posts', 'snippets', 'images', 'gdocs', 'zips', 'pdfs']).contains(type.trim());
        });
      },
      'valid_text': "One of 'posts', 'snippets', 'images', 'gdocs', 'zips', or 'pdfs'; multiple types may be separated by commas."
    },
    'limit': {
      'use': 'query',
      'ops': ['_'],
      'valid': function(limit) {
        return /^[0-9]*$/.test(limit);
      },
      'valid_text': "A number indicating how many files to show"
    },
    'name': {
      'use': 'filter',
      'ops': op_nocmp,
      'valid': function() {
        return true;
      },
      'valid_text': generic_valid_text
    },
    'title': {
      'use': 'filter',
      'ops': op_nocmp,
      'valid': function() {
        return true;
      },
      'valid_text': generic_valid_text
    },
    'is_public': {
      'use': 'filter',
      'ops': op_bool,
      'valid': function(pub) {
        return _(['true', 'false', 'yes', 'no']).contains(pub);
      },
      'valid_text': "One of 'true', 'yes', 'false', or 'no'"
    },
    'shared_in': {
      'use': 'filter',
      'ops': op_nocmp,
      'valid': function() {
        return true;
      },
      'valid_text': generic_valid_text
    },
    'size': {
      'use': 'filter',
      'ops': op_no_regex,
      'valid': function(size) {
        return /^[0-9]*[KMG]?$/.test(size);
      },
      'valid_text': "A number representing the size in bytes of the file. May end in 'K', 'M', or 'G'"
    }
  };

  hash_filter = function(hash, test_function) {
    var filtered, j, key, keys, len;
    keys = Object.keys(hash);
    filtered = {};
    for (j = 0, len = keys.length; j < len; j++) {
      key = keys[j];
      if (test_function(hash[key], key)) {
        filtered[key] = hash[key];
      }
    }
    return filtered;
  };

}).call(this);
